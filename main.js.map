{"version":3,"file":"main.js","mappings":"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","sources":["webpack://webpack-vanilla-js-template/./src/index.js"],"sourcesContent":["let cityName = \"\";\r\nlet units = \"\";\r\n\r\n// weather API key\r\nconst KEY = \"8d3ddf6f7bb003167b9c01b888993ef4\";\r\n\r\n// retrieve search elements\r\nconst input = document.getElementById(\"city-input\");\r\nconst searchButton = document.getElementById(\"search-button\");\r\nconst switchUnits = document.getElementById(\"units\");\r\n\r\n// search button event handler\r\nsearchButton.addEventListener(\"click\", (e) => {\r\n  e.preventDefault();\r\n  if (input.value) {\r\n    cityName = input.value;\r\n    units = switchUnits.value;\r\n    getForecastData(cityName, KEY, units);\r\n  } else {\r\n    getForecastData(\"osaka\", KEY, \"metric\");\r\n  }\r\n});\r\n\r\n// default: osaka - metric\r\ngetForecastData(\"osaka\", KEY, \"metric\");\r\n\r\n// fetch city data\r\nasync function geoCodeCity(name, key) {\r\n  try {\r\n    const response = await fetch(\r\n      `https://api.openweathermap.org/geo/1.0/direct?q=${name}&appid=${key}`,\r\n      { mode: \"cors\" },\r\n    );\r\n    const cityData = await response.json();\r\n    return cityData;\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n}\r\n\r\n// fetch forecast data\r\nasync function getForecastData(name, key, units) {\r\n  const cityData = await geoCodeCity(name, key);\r\n\r\n  // to get the country name\r\n  try {\r\n    const countryResponse = await fetch(\r\n      `https://restcountries.com/v3.1/name/${cityData[0].country}`,\r\n      { mode: \"cors\" },\r\n    );\r\n    const countryData = await countryResponse.json();\r\n    populateCountry(countryData, cityData);\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n\r\n  // to get the forecast\r\n  try {\r\n    const response = await fetch(\r\n      `https://api.openweathermap.org/data/2.5/forecast?lat=${cityData[0].lat}&lon=${cityData[0].lon}&appid=${key}&units=${units}&cnt=40`,\r\n      { mode: \"cors\" },\r\n    );\r\n    const forecastData = await response.json();\r\n    populateUI(forecastData, units);\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n}\r\n\r\n// UI\r\nfunction populateTemperatureNow(obj, units) {\r\n  const temp = document.querySelector(\".temp\");\r\n  const feels = document.querySelector(\".feels-like\");\r\n\r\n  temp.textContent = `${obj.list[0].main.temp} ${\r\n    units === \"metric\" ? \"째C\" : \"째F\"\r\n  }`;\r\n\r\n  feels.textContent = `feels like ${obj.list[0].main.feels_like} ${\r\n    units === \"metric\" ? \"째C\" : \"째F\"\r\n  }`;\r\n}\r\n\r\nfunction populateInfoNow(obj, units) {\r\n  const desc = document.querySelector(\".desc\");\r\n  const img = document.querySelector(\".info-now > img\");\r\n  const date = document.querySelector(\".date\");\r\n\r\n  desc.textContent = `${obj.list[0].weather[0].description}`;\r\n\r\n  img.src = `https://openweathermap.org/img/wn/${obj.list[0].weather[0].icon}@2x.png`;\r\n\r\n  img.alt = `${obj.list[0].weather[0].description}`;\r\n\r\n  const currentTime = getCurrentTimeOfCity(obj);\r\n  const day =\r\n    currentTime.getDate() < 10\r\n      ? `0${currentTime.getDate()}`\r\n      : currentTime.getDate();\r\n  const months = [\r\n    \"January\",\r\n    \"February\",\r\n    \"March\",\r\n    \"April\",\r\n    \"May\",\r\n    \"June\",\r\n    \"July\",\r\n    \"August\",\r\n    \"September\",\r\n    \"October\",\r\n    \"November\",\r\n    \"December\",\r\n  ];\r\n  const month = months[currentTime.getMonth()];\r\n  const hour =\r\n    currentTime.getHours() < 10\r\n      ? `0${currentTime.getHours()}`\r\n      : currentTime.getHours();\r\n  const minute =\r\n    currentTime.getMinutes() < 10\r\n      ? `0${currentTime.getMinutes()}`\r\n      : currentTime.getMinutes();\r\n  date.textContent = `${day} ${month} ${currentTime.getFullYear()}, ${hour}:${minute}`;\r\n}\r\n\r\nfunction getCurrentTimeOfCity(obj) {\r\n  // create Date object for current location\r\n  const currentDate = new Date();\r\n\r\n  // convert to milliseconds, add local time zone offset and get UTC time in milliseconds\r\n  const utcTime =\r\n    currentDate.getTime() + currentDate.getTimezoneOffset() * 60000;\r\n\r\n  // utc offset of the city\r\n  const { timezone } = obj.city;\r\n  const offsetCity = timezone * 1000;\r\n\r\n  // create new Date object for a different timezone using supplied its GMT offset.\r\n  const currentDateAndTimeInCity = new Date(utcTime + offsetCity);\r\n  return currentDateAndTimeInCity;\r\n}\r\n\r\nfunction getForecastDates(obj) {\r\n  // create Date object for current location\r\n  const currentDate = new Date();\r\n\r\n  // convert to milliseconds, add local time zone offset and get UTC time in milliseconds\r\n  const utcTime =\r\n    currentDate.getTime() + currentDate.getTimezoneOffset() * 60000;\r\n\r\n  // utc offset of the city\r\n  const { timezone } = obj.city;\r\n  const offsetCity = timezone * 1000;\r\n\r\n  // current date +1 day (86400000 milliseconds)\r\n  const dPlusOne = new Date(utcTime + offsetCity + 86400000);\r\n\r\n  // current date +2 days (172800000 milliseconds)\r\n  const dPlusTwo = new Date(utcTime + offsetCity + 172800000);\r\n\r\n  // current date +3 days (259200000 milliseconds)\r\n  const dPlusThree = new Date(utcTime + offsetCity + 259200000);\r\n\r\n  return { dPlusOne, dPlusTwo, dPlusThree };\r\n  // return currentDateAndTimeInCity;\r\n}\r\n\r\nfunction getSunrise(obj) {\r\n  // city sunrise\r\n  const { sunrise } = obj.city;\r\n\r\n  // utc offset of current location\r\n  const offsetCurrent = new Date().getTimezoneOffset() * 60000;\r\n\r\n  // utc offset of the city\r\n  const { timezone } = obj.city;\r\n  const offsetCity = timezone * 1000;\r\n\r\n  // total offset from current location\r\n  const totalOffset = offsetCity + offsetCurrent;\r\n\r\n  // sunrise date, relative to the city time\r\n  const sunriseDate = new Date(sunrise * 1000 + totalOffset);\r\n  return sunriseDate;\r\n}\r\n\r\nfunction getSunset(obj) {\r\n  // city sunrise\r\n  const { sunset } = obj.city;\r\n\r\n  // utc offset of current location\r\n  const offsetCurrent = new Date().getTimezoneOffset() * 60000;\r\n\r\n  // utc offset of the city\r\n  const { timezone } = obj.city;\r\n  const offsetCity = timezone * 1000;\r\n\r\n  // total offset from current location\r\n  const totalOffset = offsetCity + offsetCurrent;\r\n\r\n  // sunrise date, relative to the city time\r\n  const sunsetDate = new Date(sunset * 1000 + totalOffset);\r\n  return sunsetDate;\r\n}\r\n\r\nfunction getThreeDaysForecastData(obj) {\r\n  // return only the data of the 3 next days\r\n\r\n  // first element is the interval (3 hours) now, second element is the index to remove\r\n  const mapElementsToRemove = [\r\n    [\"00\", 7],\r\n    [\"03\", 6],\r\n    [\"06\", 5],\r\n    [\"09\", 4],\r\n    [\"12\", 3],\r\n    [\"15\", 2],\r\n    [\"18\", 1],\r\n    [\"21\", 0],\r\n  ];\r\n  const intervalNow = obj.list[0].dt_txt;\r\n  const intervalNowString = intervalNow[11] + intervalNow[12];\r\n\r\n  const numberOfElement = mapElementsToRemove.filter(\r\n    (elem) => elem[0] === intervalNowString,\r\n  );\r\n\r\n  const indexToRemove = numberOfElement[0][1];\r\n\r\n  const newArray = obj.list.filter((element, index) => index > indexToRemove);\r\n\r\n  // day+1 day+2 day+3 datas\r\n  const dayPlusOneForecast = newArray.filter((element, index) => index <= 7);\r\n  const dayPlusTwoForecast = newArray.filter(\r\n    (element, index) => index >= 8 && index <= 15,\r\n  );\r\n  const dayPlusThreeForecast = newArray.filter(\r\n    (element, index) => index >= 16 && index <= 23,\r\n  );\r\n\r\n  return { dayPlusOneForecast, dayPlusTwoForecast, dayPlusThreeForecast };\r\n}\r\n\r\nfunction meanTemp(obj) {\r\n  // sort the array by temp and mean the first and last temperature\r\n  const sortedArray = obj.sort((a, b) => a.main.temp - b.main.temp);\r\n  const meanTemperature =\r\n    (sortedArray[0].main.temp + sortedArray[7].main.temp) / 2;\r\n\r\n  return meanTemperature.toFixed(2);\r\n}\r\n\r\nfunction getDescription(obj) {\r\n  // find and return the most occuring weather description in a day\r\n  const descriptions = obj.map((element) => element.weather[0].description);\r\n\r\n  const descriptionCounts = {};\r\n  descriptions.forEach((description) => {\r\n    if (descriptionCounts[description]) {\r\n      descriptionCounts[description]++;\r\n    } else {\r\n      descriptionCounts[description] = 1;\r\n    }\r\n  });\r\n\r\n  const descriptionCountsArray = Object.entries(descriptionCounts);\r\n  descriptionCountsArray.sort((a, b) => b[1] - a[1]);\r\n  return descriptionCountsArray[0][0];\r\n}\r\n\r\nfunction getWeatherImage(description, obj) {\r\n  // find an element of the array with the same description and return the icon\r\n  const arr = obj.find(\r\n    (element) => element.weather[0].description === description,\r\n  );\r\n  const url = `https://openweathermap.org/img/wn/${arr.weather[0].icon}@2x.png`;\r\n  return url;\r\n}\r\n\r\nfunction populateOtherInfos(obj, units) {\r\n  const pressure = document.querySelector(\".pressure\");\r\n  const humidity = document.querySelector(\".humidity\");\r\n  const cloudiness = document.querySelector(\".cloudiness\");\r\n  const wind = document.querySelector(\".wind\");\r\n  const sunrise = document.querySelector(\".sunrise\");\r\n  const sunset = document.querySelector(\".sunset\");\r\n\r\n  pressure.textContent = `pressure: ${obj.list[0].main.pressure} hPa`;\r\n  humidity.textContent = `humidity: ${obj.list[0].main.humidity} %`;\r\n  cloudiness.textContent = `cloudiness: ${obj.list[0].clouds.all} %`;\r\n  wind.textContent = `wind speed: ${obj.list[0].wind.speed} ${\r\n    units === \"metric\" ? \"meter/s\" : \"miles/h\"\r\n  }`;\r\n\r\n  // retrieve sunrise and sunset date and only use hours and minutes\r\n  const sunriseDate = getSunrise(obj);\r\n  const sunriseHours =\r\n    sunriseDate.getHours() < 10\r\n      ? `0${sunriseDate.getHours()}`\r\n      : sunriseDate.getHours();\r\n  const sunriseMinutes =\r\n    sunriseDate.getMinutes() < 10\r\n      ? `0${sunriseDate.getMinutes()}`\r\n      : sunriseDate.getMinutes();\r\n  sunrise.textContent = `sunrise: ${sunriseHours}:${sunriseMinutes}`;\r\n\r\n  const sunsetDate = getSunset(obj);\r\n  const sunsetHours =\r\n    sunsetDate.getHours() < 10\r\n      ? `0${sunsetDate.getHours()}`\r\n      : sunsetDate.getHours();\r\n  const sunsetMinutes =\r\n    sunsetDate.getMinutes() < 10\r\n      ? `0${sunsetDate.getMinutes()}`\r\n      : sunsetDate.getMinutes();\r\n  sunset.textContent = `sunset: ${sunsetHours}:${sunsetMinutes}`;\r\n}\r\n\r\nfunction populateForecast(obj, units) {\r\n  const datePlusOne = document.querySelector(\".date-d-one\");\r\n  const tempPlusOne = document.querySelector(\".temp-d-one\");\r\n  const descPlusOne = document.querySelector(\".desc-d-one\");\r\n  const imgPlusOne = document.querySelector(\".img-d-one\");\r\n  const datePlusTwo = document.querySelector(\".date-d-two\");\r\n  const tempPlusTwo = document.querySelector(\".temp-d-two\");\r\n  const descPlusTwo = document.querySelector(\".desc-d-two\");\r\n  const imgPlusTwo = document.querySelector(\".img-d-two\");\r\n  const datePlusThree = document.querySelector(\".date-d-three\");\r\n  const tempPlusThree = document.querySelector(\".temp-d-three\");\r\n  const descPlusThree = document.querySelector(\".desc-d-three\");\r\n  const imgPlusThree = document.querySelector(\".img-d-three\");\r\n\r\n  // list of months\r\n  const months = [\r\n    \"January\",\r\n    \"February\",\r\n    \"March\",\r\n    \"April\",\r\n    \"May\",\r\n    \"June\",\r\n    \"July\",\r\n    \"August\",\r\n    \"September\",\r\n    \"October\",\r\n    \"November\",\r\n    \"December\",\r\n  ];\r\n\r\n  // get date+1, date+2, date+3 objects then populate forecast dates with those\r\n  const forecastDates = getForecastDates(obj);\r\n  const dayOfDayPlusOne =\r\n    forecastDates.dPlusOne.getDate() < 10\r\n      ? `0${forecastDates.dPlusOne.getDate()}`\r\n      : forecastDates.dPlusOne.getDate();\r\n  const monthOfDayPlusOne = months[forecastDates.dPlusOne.getMonth()];\r\n  const yearOfDayPlusOne = forecastDates.dPlusOne.getFullYear();\r\n\r\n  const dayOfDayPlusTwo =\r\n    forecastDates.dPlusTwo.getDate() < 10\r\n      ? `0${forecastDates.dPlusTwo.getDate()}`\r\n      : forecastDates.dPlusTwo.getDate();\r\n  const monthOfDayPlusTwo = months[forecastDates.dPlusTwo.getMonth()];\r\n  const yearOfDayPlusTwo = forecastDates.dPlusTwo.getFullYear();\r\n\r\n  const dayOfDayPlusThree =\r\n    forecastDates.dPlusThree.getDate() < 10\r\n      ? `0${forecastDates.dPlusThree.getDate()}`\r\n      : forecastDates.dPlusThree.getDate();\r\n  const monthOfDayPlusThree = months[forecastDates.dPlusThree.getMonth()];\r\n  const yearOfDayPlusThree = forecastDates.dPlusThree.getFullYear();\r\n\r\n  datePlusOne.textContent = `${dayOfDayPlusOne} ${monthOfDayPlusOne} ${yearOfDayPlusOne}`;\r\n  datePlusTwo.textContent = `${dayOfDayPlusTwo} ${monthOfDayPlusTwo} ${yearOfDayPlusTwo}`;\r\n  datePlusThree.textContent = `${dayOfDayPlusThree} ${monthOfDayPlusThree} ${yearOfDayPlusThree}`;\r\n\r\n  // mean the min and max temp of the days populate temp+1, temp+2, temp+3\r\n  const threeDaysForecastData = getThreeDaysForecastData(obj);\r\n  const meanTempDayPlusOne = meanTemp(threeDaysForecastData.dayPlusOneForecast);\r\n  const meanTempDayPlusTwo = meanTemp(threeDaysForecastData.dayPlusTwoForecast);\r\n  const meanTempDayPlusThree = meanTemp(\r\n    threeDaysForecastData.dayPlusThreeForecast,\r\n  );\r\n  tempPlusOne.textContent = `${meanTempDayPlusOne} ${\r\n    units === \"metric\" ? \"째C\" : \"째F\"\r\n  }`;\r\n  tempPlusTwo.textContent = `${meanTempDayPlusTwo} ${\r\n    units === \"metric\" ? \"째C\" : \"째F\"\r\n  }`;\r\n  tempPlusThree.textContent = `${meanTempDayPlusThree} ${\r\n    units === \"metric\" ? \"째C\" : \"째F\"\r\n  }`;\r\n\r\n  // find the most occuring description in a day and populate desc+1, desc+2, desc+3 accordingly\r\n  const descriptionDayPlusOne = getDescription(\r\n    threeDaysForecastData.dayPlusOneForecast,\r\n  );\r\n  const descriptionDayPlusTwo = getDescription(\r\n    threeDaysForecastData.dayPlusTwoForecast,\r\n  );\r\n  const descriptionDayPlusThree = getDescription(\r\n    threeDaysForecastData.dayPlusThreeForecast,\r\n  );\r\n  descPlusOne.textContent = descriptionDayPlusOne;\r\n  descPlusTwo.textContent = descriptionDayPlusTwo;\r\n  descPlusThree.textContent = descriptionDayPlusThree;\r\n\r\n  // get the corresponding img url and alt for each description\r\n  const imgOneUrl = getWeatherImage(\r\n    descriptionDayPlusOne,\r\n    threeDaysForecastData.dayPlusOneForecast,\r\n  );\r\n  const imgTwoUrl = getWeatherImage(\r\n    descriptionDayPlusTwo,\r\n    threeDaysForecastData.dayPlusTwoForecast,\r\n  );\r\n  const imgThreeUrl = getWeatherImage(\r\n    descriptionDayPlusThree,\r\n    threeDaysForecastData.dayPlusThreeForecast,\r\n  );\r\n  imgPlusOne.src = imgOneUrl;\r\n  imgPlusOne.alt = descriptionDayPlusOne;\r\n  imgPlusTwo.src = imgTwoUrl;\r\n  imgPlusTwo.alt = descriptionDayPlusTwo;\r\n  imgPlusThree.src = imgThreeUrl;\r\n  imgPlusThree.alt = descriptionDayPlusThree;\r\n}\r\n\r\nfunction populateCountry(objCountry, objCity) {\r\n  const country = objCountry.filter(\r\n    (countryInData) => countryInData.cca2 === objCity[0].country,\r\n  );\r\n  const countryName = country[0].name.common;\r\n\r\n  const countryFlag = country[0].flags;\r\n  const cityName = objCity[0].name;\r\n\r\n  // populate the city and country element\r\n  const city = document.querySelector(\".city-name\");\r\n  city.innerHTML = `${cityName}, </br> ${countryName}`;\r\n\r\n  // populate the flag image and alt\r\n  const flag = document.querySelector(\".city > img\");\r\n  flag.src = countryFlag.svg;\r\n  flag.alt = countryFlag.alt;\r\n}\r\n\r\nfunction populateUI(obj, units) {\r\n  // populate temperature now\r\n  populateTemperatureNow(obj, units);\r\n  // populate info now\r\n  populateInfoNow(obj, units);\r\n  // populate other infos\r\n  populateOtherInfos(obj, units);\r\n  // populate forecast\r\n  populateForecast(obj, units);\r\n}\r\n"],"names":["cityName","units","KEY","input","document","getElementById","searchButton","switchUnits","async","getForecastData","name","key","cityData","response","fetch","mode","json","error","console","log","geoCodeCity","countryResponse","country","objCountry","objCity","filter","countryInData","cca2","countryName","common","countryFlag","flags","querySelector","innerHTML","flag","src","svg","alt","populateCountry","lat","lon","obj","temp","feels","textContent","list","main","feels_like","populateTemperatureNow","desc","img","date","weather","description","icon","currentTime","currentDate","Date","utcTime","getTime","getTimezoneOffset","timezone","city","getCurrentTimeOfCity","day","getDate","month","getMonth","hour","getHours","minute","getMinutes","getFullYear","populateInfoNow","pressure","humidity","cloudiness","wind","sunrise","sunset","clouds","all","speed","sunriseDate","offsetCurrent","getSunrise","sunriseHours","sunriseMinutes","sunsetDate","getSunset","sunsetHours","sunsetMinutes","populateOtherInfos","datePlusOne","tempPlusOne","descPlusOne","imgPlusOne","datePlusTwo","tempPlusTwo","descPlusTwo","imgPlusTwo","datePlusThree","tempPlusThree","descPlusThree","imgPlusThree","months","forecastDates","offsetCity","dPlusOne","dPlusTwo","dPlusThree","getForecastDates","dayOfDayPlusOne","monthOfDayPlusOne","yearOfDayPlusOne","dayOfDayPlusTwo","monthOfDayPlusTwo","yearOfDayPlusTwo","dayOfDayPlusThree","monthOfDayPlusThree","yearOfDayPlusThree","threeDaysForecastData","intervalNow","dt_txt","intervalNowString","indexToRemove","elem","newArray","element","index","dayPlusOneForecast","dayPlusTwoForecast","dayPlusThreeForecast","getThreeDaysForecastData","meanTempDayPlusOne","meanTemp","meanTempDayPlusTwo","meanTempDayPlusThree","descriptionDayPlusOne","getDescription","descriptionDayPlusTwo","descriptionDayPlusThree","imgOneUrl","getWeatherImage","imgTwoUrl","imgThreeUrl","populateForecast","populateUI","sortedArray","sort","a","b","toFixed","descriptions","map","descriptionCounts","forEach","descriptionCountsArray","Object","entries","find","addEventListener","e","preventDefault","value"],"sourceRoot":""}