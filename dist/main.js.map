{"version":3,"file":"main.js","mappings":"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","sources":["webpack://webpack-vanilla-js-template/./src/Url.js","webpack://webpack-vanilla-js-template/./src/lib.js","webpack://webpack-vanilla-js-template/./src/Ui.js","webpack://webpack-vanilla-js-template/./src/index.js"],"sourcesContent":["export default class Url {\r\n    constructor() {\r\n        this.openWeatherBaseUrl = `https://api.openweathermap.org`;\r\n        this.key = `8d3ddf6f7bb003167b9c01b888993ef4`;\r\n        this.restcountriesBaseUrl = `https://restcountries.com/v3.1/name`;\r\n        this.iconBaseUrl = `https://openweathermap.org/img/wn`;\r\n    }\r\n\r\n    getGeocodeUrl(cityName) {\r\n        return `${this.openWeatherBaseUrl}/geo/1.0/direct?appid=${this.key}&q=${cityName}`;\r\n    }\r\n\r\n    getForecastUrl(latitude, longitude, units) {\r\n        return `${this.openWeatherBaseUrl}/data/2.5/forecast?appid=${this.key}&lat=${latitude}&lon=${longitude}&units=${units}&cnt=40`;\r\n    }\r\n\r\n    getRestcountriesUrl(country) {\r\n        return `${this.restcountriesBaseUrl}/${country}`;\r\n    }\r\n\r\n    getIconUrl(iconId) {\r\n        return `${this.iconBaseUrl}/${iconId}@2x.png`;\r\n    }\r\n}","import Url from \"./Url\";\r\n\r\nfunction getCurrentTimeOfCity(obj) {\r\n  // create Date object for current location\r\n  const currentDate = new Date();\r\n\r\n  // convert to milliseconds, add local time zone offset and get UTC time in milliseconds\r\n  const utcTime =\r\n    currentDate.getTime() + currentDate.getTimezoneOffset() * 60000;\r\n\r\n  // utc offset of the city\r\n  const { timezone } = obj.city;\r\n  const offsetCity = timezone * 1000;\r\n\r\n  // create new Date object for a different timezone using supplied its GMT offset.\r\n  const currentDateAndTimeInCity = new Date(utcTime + offsetCity);\r\n  return currentDateAndTimeInCity;\r\n}\r\n\r\nfunction getSunrise(obj) {\r\n  // city sunrise\r\n  const { sunrise } = obj.city;\r\n\r\n  // utc offset of current location\r\n  const offsetCurrent = new Date().getTimezoneOffset() * 60000;\r\n\r\n  // utc offset of the city\r\n  const { timezone } = obj.city;\r\n  const offsetCity = timezone * 1000;\r\n\r\n  // total offset from current location\r\n  const totalOffset = offsetCity + offsetCurrent;\r\n\r\n  // sunrise date, relative to the city time\r\n  const sunriseDate = new Date(sunrise * 1000 + totalOffset);\r\n  return sunriseDate;\r\n}\r\n\r\nfunction getSunset(obj) {\r\n  // city sunrise\r\n  const { sunset } = obj.city;\r\n\r\n  // utc offset of current location\r\n  const offsetCurrent = new Date().getTimezoneOffset() * 60000;\r\n\r\n  // utc offset of the city\r\n  const { timezone } = obj.city;\r\n  const offsetCity = timezone * 1000;\r\n\r\n  // total offset from current location\r\n  const totalOffset = offsetCity + offsetCurrent;\r\n\r\n  // sunrise date, relative to the city time\r\n  const sunsetDate = new Date(sunset * 1000 + totalOffset);\r\n  return sunsetDate;\r\n}\r\n\r\nfunction getThreeDaysForecastData(obj) {\r\n  // return only the data of the 3 next days\r\n\r\n  // first element is the interval (3 hours) now, second element is the index to remove\r\n  const mapElementsToRemove = [\r\n    [\"00\", 7],\r\n    [\"03\", 6],\r\n    [\"06\", 5],\r\n    [\"09\", 4],\r\n    [\"12\", 3],\r\n    [\"15\", 2],\r\n    [\"18\", 1],\r\n    [\"21\", 0],\r\n  ];\r\n  const intervalNow = obj.list[0].dt_txt;\r\n  const intervalNowString = intervalNow[11] + intervalNow[12];\r\n\r\n  const numberOfElement = mapElementsToRemove.filter(\r\n    (elem) => elem[0] === intervalNowString,\r\n  );\r\n\r\n  const indexToRemove = numberOfElement[0][1];\r\n\r\n  const newArray = obj.list.filter((element, index) => index > indexToRemove);\r\n\r\n  // day+1 day+2 day+3 datas\r\n  const dayPlusOneForecast = newArray.filter((element, index) => index <= 7);\r\n  const dayPlusTwoForecast = newArray.filter(\r\n    (element, index) => index >= 8 && index <= 15,\r\n  );\r\n  const dayPlusThreeForecast = newArray.filter(\r\n    (element, index) => index >= 16 && index <= 23,\r\n  );\r\n\r\n  return { dayPlusOneForecast, dayPlusTwoForecast, dayPlusThreeForecast };\r\n}\r\n\r\nfunction getDescription(obj) {\r\n  // find and return the most occuring weather description in a day\r\n  const descriptions = obj.map((element) => element.weather[0].description);\r\n\r\n  const descriptionCounts = {};\r\n  descriptions.forEach((description) => {\r\n    if (descriptionCounts[description]) {\r\n      descriptionCounts[description]++;\r\n    } else {\r\n      descriptionCounts[description] = 1;\r\n    }\r\n  });\r\n\r\n  const descriptionCountsArray = Object.entries(descriptionCounts);\r\n  descriptionCountsArray.sort((a, b) => b[1] - a[1]);\r\n  return descriptionCountsArray[0][0];\r\n}\r\n\r\nfunction meanTemp(obj) {\r\n  // sort the array by temp and mean the first and last temperature\r\n  const sortedArray = obj.sort((a, b) => a.main.temp - b.main.temp);\r\n  const meanTemperature =\r\n    (sortedArray[0].main.temp + sortedArray[7].main.temp) / 2;\r\n\r\n  return meanTemperature.toFixed(2);\r\n}\r\n\r\nfunction getWeatherImage(description, obj) {\r\n  // find an element of the array with the same description and return the icon\r\n  const arr = obj.find(\r\n    (element) => element.weather[0].description === description,\r\n  );\r\n  const url = new Url().getIconUrl(arr.weather[0].icon);\r\n  return url;\r\n}\r\n\r\nfunction getForecastDates(obj) {\r\n  // create Date object for current location\r\n  const currentDate = new Date();\r\n\r\n  // convert to milliseconds, add local time zone offset and get UTC time in milliseconds\r\n  const utcTime =\r\n    currentDate.getTime() + currentDate.getTimezoneOffset() * 60000;\r\n\r\n  // utc offset of the city\r\n  const { timezone } = obj.city;\r\n  const offsetCity = timezone * 1000;\r\n\r\n  // current date +1 day (86400000 milliseconds)\r\n  const dPlusOne = new Date(utcTime + offsetCity + 86400000);\r\n\r\n  // current date +2 days (172800000 milliseconds)\r\n  const dPlusTwo = new Date(utcTime + offsetCity + 172800000);\r\n\r\n  // current date +3 days (259200000 milliseconds)\r\n  const dPlusThree = new Date(utcTime + offsetCity + 259200000);\r\n\r\n  return { dPlusOne, dPlusTwo, dPlusThree };\r\n  // return currentDateAndTimeInCity;\r\n}\r\n\r\nfunction formatCurrentTime(currentTime) {\r\n  const day =\r\n    currentTime.getDate() < 10\r\n      ? `0${currentTime.getDate()}`\r\n      : currentTime.getDate();\r\n  const months = [\r\n    \"January\",\r\n    \"February\",\r\n    \"March\",\r\n    \"April\",\r\n    \"May\",\r\n    \"June\",\r\n    \"July\",\r\n    \"August\",\r\n    \"September\",\r\n    \"October\",\r\n    \"November\",\r\n    \"December\",\r\n  ];\r\n  const month = months[currentTime.getMonth()];\r\n  const hour =\r\n    currentTime.getHours() < 10\r\n      ? `0${currentTime.getHours()}`\r\n      : currentTime.getHours();\r\n  const minute =\r\n    currentTime.getMinutes() < 10\r\n      ? `0${currentTime.getMinutes()}`\r\n      : currentTime.getMinutes();\r\n  return `${day} ${month} ${currentTime.getFullYear()}, ${hour}:${minute}`;\r\n}\r\n\r\nfunction getFutureDate(datePlus) {\r\n  // list of months\r\n  const months = [\r\n    \"January\",\r\n    \"February\",\r\n    \"March\",\r\n    \"April\",\r\n    \"May\",\r\n    \"June\",\r\n    \"July\",\r\n    \"August\",\r\n    \"September\",\r\n    \"October\",\r\n    \"November\",\r\n    \"December\",\r\n  ];\r\n\r\n  const dayOfDayPlus =\r\n    datePlus.getDate() < 10 ? `0${datePlus.getDate()}` : datePlus.getDate();\r\n  const monthOfDayPlus = months[datePlus.getMonth()];\r\n  const yearOfDayPlus = datePlus.getFullYear();\r\n  return `${dayOfDayPlus} ${monthOfDayPlus} ${yearOfDayPlus}`;\r\n}\r\n\r\nfunction formatSunHours(date) {\r\n  const hours = date.getHours() < 10 ? `0${date.getHours()}` : date.getHours();\r\n  const minutes =\r\n    date.getMinutes() < 10 ? `0${date.getMinutes()}` : date.getMinutes();\r\n  return `${hours}:${minutes}`;\r\n}\r\n\r\nexport {\r\n  getCurrentTimeOfCity,\r\n  getSunrise,\r\n  getSunset,\r\n  getThreeDaysForecastData,\r\n  getDescription,\r\n  getWeatherImage,\r\n  getForecastDates,\r\n  getFutureDate,\r\n  meanTemp,\r\n  formatCurrentTime,\r\n  formatSunHours,\r\n};\r\n","import Url from \"./Url\";\r\nimport {\r\n  getCurrentTimeOfCity,\r\n  getSunrise,\r\n  getSunset,\r\n  getThreeDaysForecastData,\r\n  getDescription,\r\n  getWeatherImage,\r\n  getForecastDates,\r\n  getFutureDate,\r\n  meanTemp,\r\n  formatCurrentTime,\r\n  formatSunHours,\r\n} from \"./lib\";\r\n\r\nexport default class Ui {\r\n  constructor(obj, units) {\r\n    this.obj = obj;\r\n    this.units = units;\r\n  }\r\n\r\n  populateUI() {\r\n    // populate temperature now\r\n    this.populateTemperatureNow();\r\n    // populate info now\r\n    this.populateInfoNow();\r\n    // populate other infos\r\n    this.populateOtherInfos();\r\n    // populate forecast\r\n    this.populateForecast();\r\n  }\r\n\r\n  populateTemperatureNow() {\r\n    const temp = document.querySelector(\".temp\");\r\n    const feels = document.querySelector(\".feels-like\");\r\n\r\n    temp.textContent = `${this.obj.list[0].main.temp} ${\r\n      units === \"metric\" ? \"°C\" : \"°F\"\r\n    }`;\r\n\r\n    feels.textContent = `feels like ${this.obj.list[0].main.feels_like} ${\r\n      this.units === \"metric\" ? \"°C\" : \"°F\"\r\n    }`;\r\n  }\r\n\r\n  populateInfoNow() {\r\n    const desc = document.querySelector(\".desc\");\r\n    const img = document.querySelector(\".info-now > img\");\r\n    const date = document.querySelector(\".date\");\r\n\r\n    desc.textContent = `${this.obj.list[0].weather[0].description}`;\r\n\r\n    img.src = new Url().getIconUrl(this.obj.list[0].weather[0].icon);\r\n    img.alt = `${this.obj.list[0].weather[0].description}`;\r\n\r\n    const currentTime = getCurrentTimeOfCity(this.obj);\r\n    date.textContent = formatCurrentTime(currentTime);\r\n  }\r\n\r\n  populateOtherInfos() {\r\n    const pressure = document.querySelector(\".pressure\");\r\n    const humidity = document.querySelector(\".humidity\");\r\n    const cloudiness = document.querySelector(\".cloudiness\");\r\n    const wind = document.querySelector(\".wind\");\r\n    const sunrise = document.querySelector(\".sunrise\");\r\n    const sunset = document.querySelector(\".sunset\");\r\n\r\n    pressure.textContent = `pressure: ${this.obj.list[0].main.pressure} hPa`;\r\n    humidity.textContent = `humidity: ${this.obj.list[0].main.humidity} %`;\r\n    cloudiness.textContent = `cloudiness: ${this.obj.list[0].clouds.all} %`;\r\n    wind.textContent = `wind speed: ${this.obj.list[0].wind.speed} ${\r\n      this.units === \"metric\" ? \"meter/s\" : \"miles/h\"\r\n    }`;\r\n\r\n    // retrieve sunrise and sunset date and only use hours and minutes\r\n    const sunriseDate = getSunrise(this.obj);\r\n    sunrise.textContent = `sunrise: ${formatSunHours(sunriseDate)}`;\r\n\r\n    const sunsetDate = getSunset(this.obj);\r\n    sunset.textContent = `sunset: ${formatSunHours(sunsetDate)}`;\r\n  }\r\n\r\n  populateForecast() {\r\n    const datePlusOne = document.querySelector(\".date-d-one\");\r\n    const tempPlusOne = document.querySelector(\".temp-d-one\");\r\n    const descPlusOne = document.querySelector(\".desc-d-one\");\r\n    const imgPlusOne = document.querySelector(\".img-d-one\");\r\n    const datePlusTwo = document.querySelector(\".date-d-two\");\r\n    const tempPlusTwo = document.querySelector(\".temp-d-two\");\r\n    const descPlusTwo = document.querySelector(\".desc-d-two\");\r\n    const imgPlusTwo = document.querySelector(\".img-d-two\");\r\n    const datePlusThree = document.querySelector(\".date-d-three\");\r\n    const tempPlusThree = document.querySelector(\".temp-d-three\");\r\n    const descPlusThree = document.querySelector(\".desc-d-three\");\r\n    const imgPlusThree = document.querySelector(\".img-d-three\");\r\n\r\n    // get date+1, date+2, date+3 objects then populate forecast dates with those\r\n    const forecastDates = getForecastDates(this.obj);\r\n\r\n    datePlusOne.textContent = getFutureDate(forecastDates.dPlusOne);\r\n    datePlusTwo.textContent = getFutureDate(forecastDates.dPlusTwo);\r\n    datePlusThree.textContent = getFutureDate(forecastDates.dPlusThree);\r\n\r\n    // mean the min and max temp of the days populate temp+1, temp+2, temp+3\r\n    const threeDaysForecastData = getThreeDaysForecastData(this.obj);\r\n    const meanTempDayPlusOne = meanTemp(\r\n      threeDaysForecastData.dayPlusOneForecast,\r\n    );\r\n    const meanTempDayPlusTwo = meanTemp(\r\n      threeDaysForecastData.dayPlusTwoForecast,\r\n    );\r\n    const meanTempDayPlusThree = meanTemp(\r\n      threeDaysForecastData.dayPlusThreeForecast,\r\n    );\r\n    tempPlusOne.textContent = `${meanTempDayPlusOne} ${\r\n      this.units === \"metric\" ? \"°C\" : \"°F\"\r\n    }`;\r\n    tempPlusTwo.textContent = `${meanTempDayPlusTwo} ${\r\n      this.units === \"metric\" ? \"°C\" : \"°F\"\r\n    }`;\r\n    tempPlusThree.textContent = `${meanTempDayPlusThree} ${\r\n      this.units === \"metric\" ? \"°C\" : \"°F\"\r\n    }`;\r\n\r\n    // find the most occuring description in a day and populate desc+1, desc+2, desc+3 accordingly\r\n    const descriptionDayPlusOne = getDescription(\r\n      threeDaysForecastData.dayPlusOneForecast,\r\n    );\r\n    const descriptionDayPlusTwo = getDescription(\r\n      threeDaysForecastData.dayPlusTwoForecast,\r\n    );\r\n    const descriptionDayPlusThree = getDescription(\r\n      threeDaysForecastData.dayPlusThreeForecast,\r\n    );\r\n    descPlusOne.textContent = descriptionDayPlusOne;\r\n    descPlusTwo.textContent = descriptionDayPlusTwo;\r\n    descPlusThree.textContent = descriptionDayPlusThree;\r\n\r\n    // get the corresponding img url and alt for each description\r\n    const imgOneUrl = getWeatherImage(\r\n      descriptionDayPlusOne,\r\n      threeDaysForecastData.dayPlusOneForecast,\r\n    );\r\n    const imgTwoUrl = getWeatherImage(\r\n      descriptionDayPlusTwo,\r\n      threeDaysForecastData.dayPlusTwoForecast,\r\n    );\r\n    const imgThreeUrl = getWeatherImage(\r\n      descriptionDayPlusThree,\r\n      threeDaysForecastData.dayPlusThreeForecast,\r\n    );\r\n    imgPlusOne.src = imgOneUrl;\r\n    imgPlusOne.alt = descriptionDayPlusOne;\r\n    imgPlusTwo.src = imgTwoUrl;\r\n    imgPlusTwo.alt = descriptionDayPlusTwo;\r\n    imgPlusThree.src = imgThreeUrl;\r\n    imgPlusThree.alt = descriptionDayPlusThree;\r\n  }\r\n\r\n  static populateCountry(objCountry, objCity) {\r\n    const country = objCountry.filter(\r\n      (countryInData) => countryInData.cca2 === objCity[0].country,\r\n    );\r\n    const countryName = country[0].name.common;\r\n\r\n    const countryFlag = country[0].flags;\r\n    const cityName = objCity[0].name;\r\n\r\n    // populate the city and country element\r\n    const city = document.querySelector(\".city-name\");\r\n    city.innerHTML = `${cityName}, </br> ${countryName}`;\r\n\r\n    // populate the flag image and alt\r\n    const flag = document.querySelector(\".city > img\");\r\n    flag.src = countryFlag.svg;\r\n    flag.alt = countryFlag.alt;\r\n  }\r\n}\r\n","import Url from \"./Url\";\r\nimport Ui from \"./Ui\";\r\n\r\n// retrieve input elements\r\nconst cityInput = document.getElementById(\"city-input\");\r\nconst unitInput = document.getElementById(\"units\");\r\nconst searchButton = document.getElementById(\"search-button\");\r\n\r\n// fetch the city data\r\nasync function geoCodeCity(name) {\r\n  const url = new Url();\r\n  try {\r\n    const response = await fetch(url.getGeocodeUrl(name), { mode: \"cors\" });\r\n    const cityData = await response.json();\r\n    return cityData;\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n}\r\n\r\n// fetch the country name\r\nasync function getCountryName(country) {\r\n  const url = new Url();\r\n  try {\r\n    const countryResponse = await fetch(url.getRestcountriesUrl(country), {\r\n      mode: \"cors\",\r\n    });\r\n    const countryData = await countryResponse.json();\r\n    return countryData;\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n}\r\n\r\n// fetch the forecast\r\nasync function getForecast(latitude, longitude, units) {\r\n  const url = new Url();\r\n  try {\r\n    const response = await fetch(\r\n      url.getForecastUrl(latitude, longitude, units),\r\n      { mode: \"cors\" },\r\n    );\r\n    const forecastData = await response.json();\r\n    return forecastData;\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n}\r\n\r\n// fetch the forecast data\r\nasync function getForecastData(name, units) {\r\n  try {\r\n    const cityData = await geoCodeCity(name);\r\n    const forecastData = await getForecast(\r\n      cityData[0].lat,\r\n      cityData[0].lon,\r\n      units,\r\n    );\r\n    return forecastData;\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n}\r\n\r\n// initialize the screen\r\nasync function initialize(cityName, units) {\r\n  const forecastData = await getForecastData(cityName, units);\r\n  const ui = new Ui(forecastData, units);\r\n  ui.populateUI();\r\n\r\n  const cityData = await geoCodeCity(cityName);\r\n  const countryData = await getCountryName(cityData[0].country);\r\n  Ui.populateCountry(countryData, cityData);\r\n}\r\n\r\n// search button event handler\r\nsearchButton.addEventListener(\"click\", async (e) => {\r\n  e.preventDefault();\r\n  const cityName = cityInput.value;\r\n  const units = unitInput.value;\r\n  if (cityName) {\r\n    initialize(cityName, units);\r\n  } else {\r\n    initialize(\"osaka\", \"metric\");\r\n  }\r\n});\r\n\r\n// default: osaka - metric\r\ninitialize(\"osaka\", \"metric\");\r\n"],"names":["Url","constructor","this","openWeatherBaseUrl","key","restcountriesBaseUrl","iconBaseUrl","getGeocodeUrl","cityName","getForecastUrl","latitude","longitude","units","getRestcountriesUrl","country","getIconUrl","iconId","getDescription","obj","descriptions","map","element","weather","description","descriptionCounts","forEach","descriptionCountsArray","Object","entries","sort","a","b","meanTemp","sortedArray","main","temp","toFixed","getWeatherImage","arr","find","icon","getFutureDate","datePlus","getDate","getMonth","getFullYear","formatSunHours","date","getHours","getMinutes","Ui","populateUI","populateTemperatureNow","populateInfoNow","populateOtherInfos","populateForecast","document","querySelector","feels","textContent","list","feels_like","desc","img","src","alt","currentTime","currentDate","Date","utcTime","getTime","getTimezoneOffset","timezone","city","getCurrentTimeOfCity","day","month","hour","minute","formatCurrentTime","pressure","humidity","cloudiness","wind","sunrise","sunset","clouds","all","speed","sunriseDate","offsetCurrent","getSunrise","sunsetDate","getSunset","datePlusOne","tempPlusOne","descPlusOne","imgPlusOne","datePlusTwo","tempPlusTwo","descPlusTwo","imgPlusTwo","datePlusThree","tempPlusThree","descPlusThree","imgPlusThree","forecastDates","offsetCity","dPlusOne","dPlusTwo","dPlusThree","getForecastDates","threeDaysForecastData","intervalNow","dt_txt","intervalNowString","indexToRemove","filter","elem","newArray","index","dayPlusOneForecast","dayPlusTwoForecast","dayPlusThreeForecast","getThreeDaysForecastData","meanTempDayPlusOne","meanTempDayPlusTwo","meanTempDayPlusThree","descriptionDayPlusOne","descriptionDayPlusTwo","descriptionDayPlusThree","imgOneUrl","imgTwoUrl","imgThreeUrl","populateCountry","objCountry","objCity","countryInData","cca2","countryName","name","common","countryFlag","flags","innerHTML","flag","svg","cityInput","getElementById","unitInput","async","geoCodeCity","url","response","fetch","mode","json","error","console","log","initialize","forecastData","cityData","getForecast","lat","lon","getForecastData","countryData","countryResponse","getCountryName","addEventListener","e","preventDefault","value"],"sourceRoot":""}